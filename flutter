#!/usr/bin/perl

$update_file = $ARGV[0];

use Digest::SHA;
use URI::Escape;
use POSIX qw(:sys_wait_h);
use JSON;
use Path::Class;
use Data::Dumper;
use IPC::Open2;
use DBI;

if (! -d "/home/larsi/.config/flutter") {
    mkdir "/home/larsi/.config/flutter";
}

my $diff_cutoff = 0.99;

my $db = DBI->connect('dbi:SQLite:dbname=/home/larsi/.config/flutter/flutter.sqlite','','',{AutoCommit=>1,RaiseError=>1,PrintError=>0});

$db->do("CREATE TABLE IF NOT EXISTS videos (id varchar2(50) PRIMARY KEY, rate number, diff number)");

sub video_duration {
    my $entry = shift;
    return $entry->[1];
}

sub video_predicate {
    my $length = shift;
    my $a = shift;
    my $b = shift;
    my $adur = abs($length - video_duration($a));
    my $bdur = abs($length - video_duration($b));

    # If the difference is more than one minute, then we get the
    # one that has the least difference.  If not, we get the one
    # with the most difference.  This way we should be assured getting
    # some difference, but not a huge difference.
    if ($adur > 60 || $bdur > 60) {
	return $adur <=> $bdur;
    } else {
	return $bdur <=> $adur;
    }
}

# Given a search term, return the URL.
sub get_video_id {
    my $search = shift;
    my $length = shift;
    print "Searching for $search ($length)\n";

    # First find all the matching video IDs.
    system("curl",
	   "-s",
	   "-o", "/tmp/flutter.url",
	   "https://www.googleapis.com/youtube/v3/search?part=snippet&order=viewCount&q=$search&type=video&maxResults=10&key=$api_key");

    my $file = file('/tmp/flutter.url');
    $text = $file->slurp();

    my $json = decode_json $text;
    if (! $json) {
	print "Unable to parse JSON\n";
	return;
    }

    my $ids;
    $items = $json->{"items"};
    foreach my $item (@$items) { 
	my $id = $item->{"id"}->{"videoId"};
	if (! $ids) {
	    $ids = $id;
	} else {
	    $ids .= ",$id";
	}
    }

    # Then query again to get the duration of all these IDs.
    system("curl",
	   "-s",
	   "-o", "/tmp/flutter.url",
	   "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails&id=$ids&maxResults=30&key=$api_key");

    my $file = file('/tmp/flutter.url');
    $text = $file->slurp();

    my $json = decode_json $text;
    if (! $json) {
	print "Unable to parse JSON\n";
	return;
    }

    my $i = 0;
    $items = $json->{"items"};
    foreach my $item (@$items) { 
	my $title = $item->{"snippet"}->{"title"};
	my $id = $item->{"id"};
	my $duration = $item->{"contentDetails"}->{"duration"};
	my $diff = $db->selectrow_array("SELECT diff FROM videos WHERE id = '$id'");
	print "Diff '$diff'\n";
	if ($diff eq "" || $diff < $diff_cutoff) {
	    # Durations are on the format "PT3M59S".
	    if ($duration =~ /PT([0-9]+)M([0-9]+)S/) {
		$duration = $1 * 60 + $2;
		$entries[$i++] = [$id, $duration, $title];
	    }
	}
    }
    
    if ($#entries < 0) {
 	print "Can't find URL\n";
 	return;
    }

    # Sort the results so that we choose the video that has the length
    # that's least close to our target song, except really big
    # differences.
    @entries = sort { video_predicate($length, $a, $b) } @entries;

    foreach $entry (@entries) {
	my $title = $entry->[2];
	print "Duration: " . video_duration($entry) . " ($title)\n";
    }
    
    my $best_entry = $entries[0];
    print "Best length is " . video_duration($best_entry) . "\n";
    print "Best ID: " . $best_entry->[0] . "\n";
    print "Best title: " . $best_entry->[2] . "\n";
    return $best_entry->[0];
}

sub kill_mplayer {
    my $pid = shift;
    if ($pid) {
	print "Killing player $pid\n";
	kill 9, $pid;
    }
    system("pkill -9 mpv");
    system("pkill -9 mplayer");
}

sub duration {
    my $file = shift;
    open(my $fd, "-|", "mp3info", "-x", "-F", "-r", "a", $file);
    my $length;
    while (<$fd>) {
	if (/^Length: +([0-9]+):([0-9]+)/) {
	    $length = $1*60 + $2;
	}
    }
    close $fd;
    return $length;
}

$mplayer = 0;

sub play_url {
    my $url = shift;
    my $id = shift;
    open(URL, ">/tmp/flutter-url") || die;
    print URL "$url\n";
    close URL;
    my $rates;
    
    while (true) {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN,
			"/home/larsi/src/flutter/mpv-rate", $url,
			"diff", $diff_cutoff);
	waitpid($pid, 0);
	$rates = <CHLD_OUT>;
	chop $rates;
	($rate, $diff) = split / /, $rates;
	if ($rate eq "") {
	    $rate = 0;
	}
	if ($diff eq "") {
	    $diff = 1;
	}
	my $old = $db->selectrow_array("SELECT id FROM videos WHERE id = '$id'");
	if (! $old) {
	    $db->do("insert into videos values ('$id', '$rate', '$diff')");
	}
	print "Rates $rates $rate $diff\n";
	sleep(2);
	if ($diff > $diff_cutoff) {
	    exit(0);
	}
    }
    exit(0);
}

sub refresh {
    open(UF, $update_file);
    my $current = <UF>;
    close UF;

    chop($current);
    my @current = split("/", $current);

    return if ($#current) < 2;
    
    my $track = $current[$#current];
    $track =~ s/^[0-9][0-9]-|.mp3$|.flac$//g;

    my $artist = uri_escape($current[$#current - 2]);
    my $album = uri_escape($current[$#current - 1]);
    $track = uri_escape($track);

    my $length = duration($current);
    my $video_id;
    eval {
	$video_id = get_video_id("$artist+$track", $length);
    };
    
    if ($video_id) {
	my $url = `youtube-dl -g 'http://www.youtube.com/watch?v=$video_id&feature=related' 2>/dev/null | head -n 1`;
	print "youtube-dl url $url\n";
	if ($url) {
	    chop($url);
	    my $old_pid = $mplayer_pid;
	    $mplayer_pid = fork();
	    if ($mplayer_pid) {
		return;
	    } else {
		kill_mplayer($old_pid);
		play_url($url, $video_id);
	    }
	}
    }
}

$last_play = time;

open(API, "$ENV{HOME}/.youtube_api_key") || die $!;
$api_key = <API>;
chomp($api_key);

if ($ARGV[1]) {
    get_video_id($ARGV[1], 200);
    exit;
}

while (true) {
    $timestamp = (stat($update_file))[9];
    if ($timestamp > $last_timestamp ||
	($mplayer_pid && ! kill 0, $mplayer_pid) ||
	# Do a refresh every hour, because Youtube stops responding to
	# the same URL after a while.
	time - (60 * 60) > $last_play) {
	$last_play = time;
	refresh();
    }
    $last_timestamp = $timestamp;
    sleep(1);
    do {
	$kid = waitpid -1, WNOHANG;
    } while $kid > 0;
}
